#include <iostream>
#include <vector>

class Solution {
public:
    void gameOfLife(std::vector<std::vector<int>>& board) {
        int R = board.size();
        int C = board[0].size();

        int dx[] = {1, 1, 0, -1, -1, -1, 0, 1};
        int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};

        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                int liveCounts = 0;
                for (int k = 0; k < 8; k++) {
                    int x = i + dx[k];
                    int y = j + dy[k];
                    if (isSafe(x, y, R, C) && (board[x][y] == 1 || board[x][y] == -1)) {
                        liveCounts++;
                    }
                }
                if (board[i][j] == 1 && (liveCounts < 2 || liveCounts > 3)) {
                    board[i][j] = -1;  // Mark for death
                }
                if (board[i][j] == 0 && liveCounts == 3) {
                    board[i][j] = 2;   // Mark for life
                }
            }
        }

        // Apply the changes
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 1;
                } else if (board[i][j] == -1) {
                    board[i][j] = 0;
                }
            }
        }
    }

private:
    bool isSafe(int x, int y, int R, int C) {
        return (x >= 0 && x < R && y >= 0 && y < C);
    }
};

int main() {
    std::vector<std::vector<int>> board = {
        {0, 1, 0},
        {0, 0, 1},
        {1, 1, 1},
        {0, 0, 0}
    };

    Solution solution;
    solution.gameOfLife(board);

    // Display the output
    for (const auto& row : board) {
        for (int cell : row) {
            std::cout << cell << " ";
        }
        std::cout << "\n";
    }

    return 0;
}
