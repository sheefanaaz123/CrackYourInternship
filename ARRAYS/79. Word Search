#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    bool helper(vector<vector<char>>& board, string& word, int i, int j, int k) {
        int n = board.size();
        int m = board[0].size();

        if (i < 0 || i >= n || j < 0 || j >= m || board[i][j] == '.' || word[k] != board[i][j])
            return false;

        if (k == word.size() - 1)
            return true;

        board[i][j] = '.';
        bool temp = false;

        int x[4] = {0, 0, -1, 1};
        int y[4] = {-1, 1, 0, 0};

        for (int index = 0; index < 4; index++) {
            temp = temp || helper(board, word, i + x[index], j + y[index], k + 1);
            if (temp) break; // Early exit if found
        }

        board[i][j] = word[k];
        return temp;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        if (n == 0 || word.size() == 0)
            return false;

        int m = board[0].size();

        if (word.size() > n * m)
            return false; // Word is longer than the board dimensions

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (word[0] == board[i][j]) {
                    if (helper(board, word, i, j, 0))
                        return true;
                }
            }
        }
        return false;
    }
};

int main() {
    int n, m;
    cout << "Enter the number of rows: ";
    cin >> n;
    cout << "Enter the number of columns: ";
    cin >> m;

    vector<vector<char>> board(n, vector<char>(m));
    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> board[i][j];
        }
    }

    string word;
    cout << "Enter the word to search: ";
    cin >> word;

    Solution obj;
    bool result = obj.exist(board, word);

    if (result)
        cout << "The word \"" << word << "\" exists in the board." << endl;
    else
        cout << "The word \"" << word << "\" does not exist in the board." << endl;

    return 0;
}
