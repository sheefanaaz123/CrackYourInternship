class Solution {
public:
  
// Function to check if placing character 'c' at position (row, col) is valid
bool isValid(vector<vector<char>>& board, int row, int col, char c) {
  // Check if 'c' is not present in the same row, column, or 3x3 subgrid
  for (int i = 0; i < 9; i++) {
    if (board[i][col] == c)
      return false;

    if (board[row][i] == c)
      return false;

    if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
      return false;
  }
  return true;
}

// Recursive function to solve the Sudoku puzzle using backtracking
bool solveSudoku(vector<vector<char>>& board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[0].size(); j++) {
      if (board[i][j] == '.') {
        // Try placing characters '1' to '9' and check if it's a valid move
        for (char c = '1'; c <= '9'; c++) {
          if (isValid(board, i, j, c)) {
            // Place 'c' if it's a valid move
            board[i][j] = c;

            // Recursively attempt to solve the Sudoku puzzle
            if (solveSudoku(board))
              return true;
            else
              // If the current placement does not lead to a solution, backtrack
              board[i][j] = '.';
          }
        }

        // If no valid move is found, backtrack to the previous state
        return false;
      }
    }
  }
  // If all cells are filled, the puzzle is solved
  return true;
}
};
