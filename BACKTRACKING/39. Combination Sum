// class Solution {
// public: 
//     void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds) {
//         if(ind == arr.size()) {
//             if(target == 0) {
//                 if(ans.find(ds)==ans.end()){
//                      ans.push_back(ds); 
//                 }
//             }
//             return; 
//         }
//         // pick up the element 
//         if(arr[ind] <= target) {
//             ds.push_back(arr[ind]); 
//             findCombination(ind, target - arr[ind], arr, ans, ds); 
//             ds.pop_back(); 
//         }
        
//         findCombination(ind+1, target, arr, ans, ds); 
        
//     }
// public:
//     vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
//         vector<vector<int>> ans; 
//         vector<int> ds; 
//         findCombination(0, target, candidates, ans, ds); 
//         return ans; 
//     }
// };


class Solution {
    public: 
    void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds) {
        if(target==0) {
            ans.push_back(ds);
            return;
        }        
        for(int i = ind;i<arr.size();i++) {
            if(i>ind && arr[i]==arr[i-1]) continue; 
            if(arr[i]>target) break; 
            ds.push_back(arr[i]);
            findCombination(i, target - arr[i], arr, ans, ds); 
            ds.pop_back(); 
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans; 
        vector<int> ds; 
        findCombination(0, target, candidates, ans, ds); 
        return ans; 
    }
};
