class Solution {
public:
    // Declare a dp array
    int dp[35][35];

    // Recursive helper function to calculate the minimum cost
    int helper(vector<int>& arr, int start, int end, vector<int>& prefix, int k) {
        // If the number of elements is less than k, no merge is possible
        if (end - start + 1 < k) {
            return 0;
        }

        // If the result for the current state is already calculated, return it
        if (dp[start][end] != -1) {
            return dp[start][end];
        }

        int mini = INT_MAX;

        // Partition the array at j
        for (int j = start; j < end; j += k - 1) {
            int left = helper(arr, start, j, prefix, k);
            int right = helper(arr, j + 1, end, prefix, k);
            mini = min({mini, left + right});
        }

        // Add the cost of merging two parts
        if ((end - start) % (k - 1) == 0) {
            int sum = 0;
            sum += prefix[end];
            if (start > 0) {
                sum -= prefix[start - 1];
            }
            mini += sum;
        }

        // Store the result and return
        return dp[start][end] = mini;
    }

    int mergeStones(vector<int>& arr, int k) {
        int n = arr.size();

        // If it is not possible to merge stones into a single pile
        if ((n - 1) % (k - 1)) {
            return -1;
        }

        // Find the prefix sum
        vector<int> prefix(n, 0);
        prefix[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }

        // Initialize dp array with -1
        memset(dp, -1, sizeof(dp));

        // Call the recursive helper function
        return helper(arr, 0, n - 1, prefix, k);
    }
};
