class Solution {
public:
    // Function to find the minimum path sum in a given grid
    int minPathSum(vector<vector<int>>& grid) {
        // Get the number of rows and columns in the grid
        int m = grid.size();
        int n = grid[0].size();
        
        // Create a 2D vector 'sum' to store intermediate sums
        vector<vector<int>> sum(m, vector<int>(n, grid[0][0]));
        
        // Calculate the cumulative sum for the first column
        for (int i = 1; i < m; i++)
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        
        // Calculate the cumulative sum for the first row
        for (int j = 1; j < n; j++)
            sum[0][j] = sum[0][j - 1] + grid[0][j];
        
        // Iterate through the remaining cells to find the minimum path sum
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++)
                // Update 'sum' with the minimum of the previous row and previous column plus the current cell value
                sum[i][j]  = min(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
        
        // Return the minimum path sum, which is stored in the bottom-right cell of 'sum'
        return sum[m - 1][n - 1];
    }
};
