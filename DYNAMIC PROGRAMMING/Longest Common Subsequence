#include <vector>
#include <algorithm>

class Solution {
public:
    /**
     * Calculates the length of the longest common subsequence between two strings.
     * @param text1 The first input string.
     * @param text2 The second input string.
     * @return The length of the longest common subsequence.
     */
    int longestCommonSubsequence(std::string text1, std::string text2) {
        int length1 = text1.length();
        int length2 = text2.length();

        // Initialize a 2D vector for dynamic programming.
        // dp[i][j] represents the length of the LCS of text1[0..i-1] and text2[0..j-1].
        std::vector<std::vector<int>> dp(length1 + 1, std::vector<int>(length2 + 1, 0));

        // Fill in the dynamic programming table.
        for (int i = 1; i <= length1; ++i) {
            for (int j = 1; j <= length2; ++j) {
                // If the current characters in both strings match.
                if (text1[i - 1] == text2[j - 1])
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                else
                    // If characters do not match, choose the maximum of the two previous states.
                    dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        // The bottom-right cell contains the length of the LCS of the entire strings.
        return dp[length1][length2];
    }
};
