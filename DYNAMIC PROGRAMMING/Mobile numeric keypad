#include <iostream>
#include <cstring>

using namespace std;

class Solution {
    long long dp[10][1005];
    int mat[4][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
        {-1, 0, -1}
    };

public:

    long long solve(int i, int j, int n) {
        if (n == 1) {
            return 1;
        }
        if (dp[mat[i][j]][n] != -1) {
            return dp[mat[i][j]][n];
        }

        long long total = 0;

        total += solve(i, j, n - 1);

        // Now for all directions
        if (j - 1 >= 0 && mat[i][j - 1] != -1) {
            total += solve(i, j - 1, n - 1);
        }
        if (j + 1 < 3 && mat[i][j + 1] != -1) {
            total += solve(i, j + 1, n - 1);
        }
        if (i - 1 >= 0 && mat[i - 1][j] != -1) {
            total += solve(i - 1, j, n - 1);
        }
        if (i + 1 < 4 && mat[i + 1][j] != -1) {
            total += solve(i + 1, j, n - 1);
        }

        return dp[mat[i][j]][n] = total;
    }

    long long getCount(int n) {
        memset(dp, -1, sizeof(dp));
        long long ans = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                if (mat[i][j] != -1) {
                    ans += solve(i, j, n);
                }
            }
        }
        return ans;
    }
};

int main() {
    Solution solution;
    int N = 5; // You can change the value of N
    cout << "Count: " << solution.getCount(N) << endl;
    return 0;
}
