class Solution {
public:
    vector<vector<int>> directions = {
        {-1, 0},
        {0, -1},
        {0, 1},
        {1, 0}
    };
    
    int n, m;

    // Function to check if a cell is within bounds
    bool isSafe(int i, int j) {
        return (i < m && i >= 0 && j < n && j >= 0);
    }

    // Recursive DFS function to mark and count cells of the same island
    void dfs(int land_id, int i, int j, vector<vector<int>>& grid, int &count) {
        if (!isSafe(i, j) || grid[i][j] > 1 || grid[i][j] == 0) {
            return;
        }

        grid[i][j] = land_id;
        count++;

        for (auto &dir : directions) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];

            dfs(land_id, i_, j_, grid, count);
        }
    }

    // Main function to find the size of the largest island
    int largestIsland(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
    
        map<int, int> mp;
        int land_id = 2;
        int ans = INT_MIN;
        
        // Storing the size of each island using DFS
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    int count = 0;
                    dfs(land_id, i, j, grid, count);
                    mp[land_id] = count;
                    land_id++;
                }
            }
        }

        // Calculating the size of the largest island after changing at most one 0 to 1
        int maxi = 0;  // Initialize maxi to 0 instead of INT_MIN
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0) {
                    int sum = 1;  // Start with 1 for the current cell
                    set<int> s;
                    for (auto &dir : directions) {
                        int i_ = i + dir[0];
                        int j_ = j + dir[1];
                        if (isSafe(i_, j_) && grid[i_][j_] > 1 && s.find(grid[i_][j_]) == s.end()) {
                            s.insert(grid[i_][j_]);
                            auto it = mp.find(grid[i_][j_]);
                            sum += it->second;  // Use it->second instead of it
                        }
                    }
                    maxi = max(sum, maxi);
                }
            }
        }

        return maxi == 0 ? m * n : maxi; 
    }
};
