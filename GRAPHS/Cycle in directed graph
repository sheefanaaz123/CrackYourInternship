DFS:

class Solution {
  public:
    
    bool isCycleDFS(vector<int> adj[], int u, vector<bool>& visited, vector<bool>& inRecursion) {
        visited[u] = true;
        inRecursion[u] = true;
        
        
        for(int &v : adj[u]) {
            //if not visited, then we check for cycle in DFS
            if(visited[v] == false && isCycleDFS(adj, v, visited, inRecursion))
                return true;
            else if(inRecursion[v] == true)
                return true;
        }
        
        inRecursion[u] = false;
        return false;
        
    }
    
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<bool> visited(V, false);
        vector<bool> inRecursion(V, false);
        
        for(int i = 0; i<V; i++) {
            if(!visited[i] && isCycleDFS(adj, i, visited, inRecursion))
                return true;
        }
        
        return false;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------

BFS:

class Solution {
public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int N, vector<int> adj[]) {
        // Queue to store vertices with 0 in-degree.
        queue<int> que;

        // Array to store in-degrees of each vertex, initialized with zeros.
        vector<int> indegree(N, 0);
        
        // Variable to count the number of vertices with 0 in-degree.
        int count = 0;

        // 1. Calculate in-degrees for each vertex.
        for(int u = 0; u<N; u++) {
            for(int &v : adj[u]) {
                indegree[v]++;
            }
        }
        
        // 2. Enqueue vertices with in-degree 0 and update count.
        for(int i = 0; i<N; i++) {
            if(indegree[i] == 0) {
                que.push(i);
                count++;
            }
        }
        
        // 3. Perform a simple BFS to detect cycles and update count.
        while(!que.empty()) {
            // Dequeue a vertex.
            int u = que.front();
            que.pop();
            
            for(int &v : adj[u]) {
                // Decrement in-degree of the adjacent vertex.
                indegree[v]--;
                
                // If in-degree becomes 0, enqueue the vertex and update count.
                if(indegree[v] == 0) {
                    que.push(v);
                    count++;
                }
            }
        }
        
        // If count is not equal to the total number of vertices, there is a cycle.
        return count != N;
    }
};


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------


DSU:


