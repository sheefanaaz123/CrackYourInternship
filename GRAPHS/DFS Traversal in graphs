#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
  private:
  
  void dfs(int node, vector<int>adj[], int vis[], vector<int>&ls){
      vis[node]=1;
      ls.push_back(node);
      
      for(auto it:adj[node]){
          if(!vis[it]){
              dfs(it,adj,vis,ls);
          }
      }
  }
  
  public:

    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        int vis[V]={0};
        int start = 0;
        vector<int>ls;
        dfs(start,adj,vis,ls);
        return ls;
    }
};

int main() {
  int V = 4;
  vector<int> adj[] = {{1, 2}, {0, 3}, {0, 2}, {1, 3}};

  // Perform DFS traversal
  Solution solution;
  vector<int> dfs = solution.dfsOfGraph(V, adj);

  // Print the DFS traversal
  for (int i = 0; i < dfs.size(); i++) {
    cout << dfs[i] << " ";
  }
  cout << endl;

  return 0;
}
