class Solution {
public:
    // Function to find the shortest distance between all pairs of nodes in a graph.
    void shortest_distance(vector<vector<int>>& grid) {
        int n = grid.size(); // Get the number of nodes in the graph.
        
        // Convert -1 entries to a large value (100000) to represent infinity.
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == -1)
                    grid[i][j] = 100000;
            }
        }
        
        // Floyd-Warshall algorithm for all pairs shortest paths.
        for(int via = 0; via < n; via++) {
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < n; j++) {
                    // Update the shortest distance between nodes i and j through the intermediate node 'via'.
                    grid[i][j] = min(grid[i][j], grid[i][via] + grid[via][j]);
                }
            }
        }
        
        // Convert back the large values to -1 for representing infinity in the original graph.
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 100000)
                    grid[i][j] = -1;
            }
        }
    }
};
