#include <bits/stdc++.h>
using namespace std;

class Coordinate {
public:
    int x, y;

    Coordinate(int _x, int _y) : x(_x), y(_y) {}
};

class Solution {
public:
    int knight(int N, int M, int x1, int y1, int x2, int y2) {
        vector<int> dx = {-1, -2, -1, -2, 1, 2, 1, 2};
        vector<int> dy = {-2, -1, 2, 1, -2, -1, 2, 1};
        vector<vector<bool>> isVisited(N + 1, vector<bool>(M + 1, false));
        queue<Coordinate> que;
        que.push(Coordinate(x1, y1));
        isVisited[x1][y1] = true;
        int moveCount = 0;

        while (!que.empty()) {
            int nodesAtCurrentBreadth = que.size();
            for (int count = 0; count < nodesAtCurrentBreadth; count++) {
                Coordinate currPos = que.front();
                que.pop();
                if (currPos.x == x2 && currPos.y == y2) {
                    return moveCount;
                }

                for (int i = 0; i < 8; i++) {
                    int newX = currPos.x + dx[i];
                    int newY = currPos.y + dy[i];
                    if (isValid(newX, newY, N, M) && !isVisited[newX][newY]) {
                        que.push(Coordinate(newX, newY));
                        isVisited[newX][newY] = true;
                    }
                }
            }
            moveCount++;
        }

        return -1;
    }

private:
    bool isValid(int x, int y, int N, int M) {
        return x > 0 && y > 0 && x <= N && y <= M;
    }
};

int main() {
    Solution solution;

    // Example usage:
    int N = 8, M = 8;
    int x1 = 1, y1 = 1, x2 = 8, y2 = 8;

    int result = solution.knight(N, M, x1, y1, x2, y2);

    cout << "Minimum moves for the knight: " << result << endl;

    return 0;
}
