#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr)
            return l2;
        if (l2 == nullptr)
            return l1;
        if (l1->val > l2->val) {
            std::swap(l1, l2);
        }
        ListNode* result = l1;
        while (l1 != nullptr && l2 != nullptr) {
            ListNode* temp = nullptr;
            while (l1 != nullptr && l1->val <= l2->val) {
                temp = l1;
                l1 = l1->next;
            }
            temp->next = l2;
            std::swap(l1, l2);
        }
        return result;
    }
};

// Function to create a linked list from an array
ListNode* createLinkedList(int arr[], int n) {
    if (n == 0)
        return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    for (int i = 1; i < n; ++i) {
        current->next = new ListNode(arr[i]);
        current = current->next;
    }
    return head;
}

// Function to print a linked list
void printLinkedList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->val << " -> ";
        current = current->next;
    }
    std::cout << "nullptr" << std::endl;
}

int main() {
    int arr1[] = {5,7,9};
    int arr2[] = {3,4,8,10};

    ListNode* l1 = createLinkedList(arr1, sizeof(arr1) / sizeof(arr1[0]));
    ListNode* l2 = createLinkedList(arr2, sizeof(arr2) / sizeof(arr2[0]));

    Solution solution;
    ListNode* merged = solution.mergeTwoLists(l1, l2);

    std::cout << "Merged Linked List: ";
    printLinkedList(merged);

    return 0;
}
