#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* small = new ListNode(0);
        ListNode* large = new ListNode(0);

        ListNode* smallP = small;
        ListNode* largeP = large;

        while (head) {
            if (head->val < x) {
                smallP->next = head;
                smallP = smallP->next;
            } else {
                largeP->next = head;
                largeP = largeP->next;
            }

            head = head->next;
        }

        largeP->next = nullptr;
        smallP->next = large->next;
        return small->next;
    }
};

// Driver code to test the partition function
void printList(ListNode* head) {
    while (head) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    // Create a sample linked list
    ListNode* head = new ListNode(1);
    head->next = new ListNode(4);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(2);
    head->next->next->next->next = new ListNode(5);
    head->next->next->next->next->next = new ListNode(2);

    std::cout << "Original Linked List: ";
    printList(head);

    Solution solution;
    int x = 3;
    ListNode* result = solution.partition(head, x);

    std::cout << "Linked List after partitioning at " << x << ": ";
    printList(result);

    return 0;
}
