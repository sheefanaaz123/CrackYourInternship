#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(); 
        ListNode *temp = dummy; 
        int carry = 0;
        
        // Traverse both linked lists and add corresponding digits
        while (l1 != nullptr || l2 != nullptr || carry) {
            int sum = 0; 
            if (l1 != nullptr) {
                sum += l1->val; 
                l1 = l1->next; 
            }
            
            if (l2 != nullptr) {
                sum += l2->val; 
                l2 = l2->next; 
            }
            
            sum += carry; 
            carry = sum / 10; 
            
            // Create a new node for the result
            ListNode *node = new ListNode(sum % 10); 
            temp->next = node; 
            temp = temp->next; 
        }
        
        // Return the head of the result linked list
        return dummy->next; 
    }
};

int main() {
    // Example usage
    Solution solution;
    
    // Create linked lists representing numbers
    ListNode* l1 = new ListNode(2, new ListNode(4, new ListNode(3)));
    ListNode* l2 = new ListNode(5, new ListNode(6, new ListNode(4)));
    
    // Add the two numbers
    ListNode* result = solution.addTwoNumbers(l1, l2);

    // Output the result
    while (result != nullptr) {
        std::cout << result->val << " ";
        result = result->next;
    }

    return 0;
}
