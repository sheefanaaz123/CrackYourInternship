#include <iostream>

struct Node {
    int data;
    Node* next;
    Node* bottom;
};

Node* merge(Node* a, Node* b)
{
    if (a == NULL)return b;
    if (b == NULL)return a;

    Node* result;
 
    if (a->data < b->data) {
        result = a;
        result->bottom = merge(a->bottom, b);
    }
 
    else {
        result = b;
        result->bottom = merge(a, b->bottom);
    }

    result->next = NULL;
    return result;
}
 
Node* flatten(Node* root)
{
 
    if (root == NULL || root->next == NULL)
        return root;


    return merge(root,flatten(root->next));

}

// Driver code to test the functions
int main() {
    // Create a sample linked list with three nodes
    Node* head = new Node{1, nullptr, nullptr};
    head->next = new Node{2, nullptr, nullptr};
    head->next->next = new Node{3, nullptr, nullptr};

    // Create another linked list with nodes having bottom pointers
    head->bottom = new Node{4, nullptr, nullptr};
    head->bottom->bottom = new Node{7, nullptr, nullptr};
    head->bottom->bottom->bottom = new Node{9, nullptr, nullptr};

    head->next->bottom = new Node{5, nullptr, nullptr};
    head->next->bottom->bottom = new Node{8, nullptr, nullptr};

    head->next->next->bottom = new Node{6, nullptr, nullptr};

    // Flatten the linked list
    Node* flattened = flatten(head);

    // Print the flattened linked list
    while (flattened != nullptr) {
        std::cout << flattened->data << " ";
        flattened = flattened->bottom;
    }

    return 0;
}
