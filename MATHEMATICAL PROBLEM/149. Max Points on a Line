#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>

using namespace std;

class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int n = points.size();
        if (n == 1)
            return 1;

        int result = 0;

        for (int i = 0; i < n; i++) {

            unordered_map<double, int> mp;

            for (int j = 0; j < n; j++) {

                if (i == j) continue;

                auto dy = points[j][1] - points[i][1];
                auto dx = points[j][0] - points[i][0];
                auto slope = atan2(dy, dx);

                mp[slope]++;
            }

            for (auto& it : mp) {
                result = max(result, it.second + 1);
            }
        }

        return result;
    }
};

int main() {
    Solution solution;

    // Example usage
    vector<vector<int>> points1 = {{1, 1}, {2, 2}, {3, 3}};
    int result1 = solution.maxPoints(points1);
    cout << "Max points on a line for example 1: " << result1 << endl;

    vector<vector<int>> points2 = {{1, 1}, {3, 2}, {5, 3}, {4, 1}, {2, 3}, {1, 4}};
    int result2 = solution.maxPoints(points2);
    cout << "Max points on a line for example 2: " << result2 << endl;

    return 0;
}
