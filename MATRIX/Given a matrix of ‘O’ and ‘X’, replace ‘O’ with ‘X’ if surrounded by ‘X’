#include <bits/stdc++.h>
using namespace std;

class Solution{
    
private:
    void dfs(int row, int col,vector<vector<int>> &visited, vector<vector<char>> &mat, int delrow[], int delcol[]){
        visited[row][col]=1;
        int n = mat.size();
        int m = mat[0].size();
        
        for(int i=0; i<4; i++){
            int nrow = delrow[i]+row;
            int ncol = delcol[i]+col;
            if(nrow>=0 && nrow<n && ncol >=0 && ncol <m && !visited[nrow][ncol] && mat[nrow][ncol]=='O'){
                dfs(nrow, ncol,visited,mat,delrow,delcol);
            }
        }
    }
public:
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        
        int delrows[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        
        vector<vector<int>>visited(n,vector<int>(m,0));
        
        for(int j=0; j<m; j++){
            if(!visited[0][j] && mat[0][j]=='O'){
                dfs(0,j,visited,mat,delrows,delcol);
            }
            if(!visited[n-1][j] && mat[n-1][j]=='O'){
                 dfs(n-1,j,visited,mat,delrows,delcol);
            }
        }
        
        for(int i=0; i<n; i++){
            if(!visited[i][0] && mat[i][0]=='O'){
                dfs(i,0,visited,mat,delrows,delcol);
            }
            if(!visited[i][m-1] && mat[i][m-1]=='O'){
                dfs(i,m-1,visited,mat,delrows,delcol);
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!visited[i][j] && mat[i][j]=='O'){
                    mat[i][j]='X';
                }
            }
        }
        
        return mat;
    }
};


int main() {
    // Example usage
    Solution solution;

    int n = 4;
    int m = 4;
    vector<vector<char>> mat = {
        {'O', 'O', 'X', 'O'},
        {'O', 'X', 'O', 'X'},
        {'O', 'X', 'X', 'O'},
        {'O', 'O', 'O', 'O'}
    };

    cout << "Original Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }

    vector<vector<char>> filledMatrix = solution.fill(n, m, mat);

    cout << "\nFilled Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << filledMatrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


