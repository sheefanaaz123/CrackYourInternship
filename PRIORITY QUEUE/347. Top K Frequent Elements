MIN HEAP:

class Solution {
public:
    // Using typedef to simplify the syntax for a pair of integers
    typedef pair<int, int> p;

    vector<int> topKFrequent(vector<int>& nums, int k) {

        // Create a min-heap to store pairs (frequency, element)
        // The heap will order elements based on their frequency in ascending order
        priority_queue<p, vector<p>, greater<p>> pq;

        // Count the frequency of each element using an unordered_map
        // Worst Case - n distinct elements are stored, so, space O(n)
        unordered_map<int, int> mp;
        for(int i : nums)
            mp[i]++;

        // Push pairs into min-heap and maintain its size at most k
        for(auto it : mp) {
            pq.push({it.second, it.first});

            // If the size of the heap exceeds k, remove the smallest element
            if(pq.size() > k)
                pq.pop();
        }

        // Pick all top K elements from the min-heap
        vector<int> result;
        while(!pq.empty()) {
            result.push_back(pq.top().second);
            pq.pop();
        }

        // The result vector now contains the top k frequent elements
        return result;
    }
};

-------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size();
        
        // Create a map to store the frequency of each element
        unordered_map<int, int> mp;
        
        // Count the frequency of each element in the nums array
        for(int &num : nums) {
            mp[num]++;
        }
        
        // Create a bucket to store elements based on their frequency
        // Index represents frequency, and each element is stored in the corresponding bucket
        vector<vector<int>> bucket(n+1);
        
        // Populate the bucket based on the frequency map
        for(auto &it : mp) {
            int element = it.first;
            int freq    = it.second;
            
            bucket[freq].push_back(element);
        }
        
        // Pick elements from right to left to find max frequency elements
        vector<int> result;
        for(int i = n; i >= 0; i--) {
            
            // If the bucket is empty, continue to the next frequency
            if(bucket[i].size() == 0) continue;
            
            // Pick elements from the bucket until 'k' becomes zero
            while(bucket[i].size() > 0 && k > 0) {
                result.push_back(bucket[i].back());
                bucket[i].pop_back();
                k--;
            }
        }
        
        return result;
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
