#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        // Queue for BFS traversal
        queue<pair<pair<int, int>, int>> q;

        // Matrix to keep track of visited cells
        int vis[n][m];

        // Count of fresh oranges
        int cntFresh = 0;

        // Initialize the queue and visited matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.push({{i, j}, 0});
                    vis[i][j] = 2;  // Mark rotten oranges as visited
                } else {
                    vis[i][j] = 0;
                }

                // Count fresh oranges
                if (grid[i][j] == 1) 
                    cntFresh++;
            }
        }

        int tm = 0; // Time to rot all oranges

        int drow[] = {-1, 0, +1, 0};
        int dcol[] = {0, 1, 0, -1}; 
        int cnt = 0; // Count of rotten oranges

        // BFS traversal (until the queue becomes empty)
        while (!q.empty()) {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            tm = max(tm, t);
            q.pop();

            // Explore neighboring cells
            for (int i = 0; i < 4; i++) {
                int nrow = r + drow[i];
                int ncol = c + dcol[i];

                // Check if the neighboring cell is valid and has a fresh orange
                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                    vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1) {
                    q.push({{nrow, ncol}, t + 1});
                    vis[nrow][ncol] = 2; // Mark the fresh orange as rotten
                    cnt++;
                }
            }
        }

        // If not all fresh oranges were rotten, return -1
        if (cnt != cntFresh) 
            return -1;

        return tm; // Return the time to rot all oranges
    }
};

int main() {
    // Sample grid
    vector<vector<int>> grid{{0, 1, 2}, {0, 1, 2}, {2, 1, 1}};

    Solution obj;
    int ans = obj.orangesRotting(grid);
    cout << ans << "\n";

    return 0;
}
