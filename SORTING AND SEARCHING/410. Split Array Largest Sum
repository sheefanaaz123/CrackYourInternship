
#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int low = *max_element(nums.begin(), nums.end());
        int high = accumulate(nums.begin(), nums.end(), 0);
        int ans = low;

        while (low <= high) {
            int mid = (low + high) / 2;
            int n = no_of_subarrays_with_max_sum_as_mid(nums, mid);

            if (n > m) {
                low = mid + 1;
            } else {
                ans = mid;
                high = mid - 1;
            }
        }

        return ans;
    }

    int no_of_subarrays_with_max_sum_as_mid(vector<int>& nums, int mid) {
        int sum = 0;
        int count = 1;

        for (int i = 0; i < nums.size(); i++) {
            if (sum + nums[i] > mid) {
                sum = nums[i];
                count++;
            } else {
                sum += nums[i];
            }
        }

        return count;
    }
};

int main() {
    Solution solution;

    // Test input vector
    vector<int> nums = {7, 2, 5, 10, 8};
    int m = 2;

    // Call splitArray function and print the result
    int result = solution.splitArray(nums, m);

    cout << "Minimum Largest Sum: " << result << endl;

    return 0;
}
