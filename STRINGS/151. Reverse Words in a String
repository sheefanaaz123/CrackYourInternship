APPROACH 1 : TOKENISATION

#include <sstream>
#include <string>
#include<iostream>

using namespace std;

class Solution {
public:
    string reverseWords(string s) {
        stringstream ss(s);
        string token = "";

        string result = "";
        while (ss >> token) {
            result = token + " " + result;
        }

        return result.substr(0, result.length() - 1);
    }
};

int main() {
    Solution solution;
    string input = "the sky is blue";
    string reversed = solution.reverseWords(input);
    cout << "Original: " << input << endl;
    cout << "Reversed: " << reversed << endl;
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------
APPROACH 2 : Two Pointers

#include <iostream>
#include <algorithm>
using namespace std;

class Solution {
public:
    string reverseWords(string s) {
        reverse(s.begin(), s.end());
        
        int i = 0;
        int l = 0, r = 0;
        int n = s.length();
        
        while (i < n) {
            while (i < n && s[i] != ' ') {
                s[r++] = s[i++];
            }
            
            if (l < r) {
                reverse(s.begin() + l, s.begin() + r);
                s[r] = ' ';
                r++;
                l = r;
            }
            
            i++;
        }
        
        s = s.substr(0, r - 1);
        
        return s;
    }
};

int main() {
    Solution solution;
    string input = "the sky is blue";
    string reversed = solution.reverseWords(input);
    
    cout << "Original: " << input << endl;
    cout << "Reversed: " << reversed << endl;
    
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------

APPROACH 2:
