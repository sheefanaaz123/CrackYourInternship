class Solution {
public:
    string simplifyPath(string path) {
        
        int index=path.size()-1;
        string ans="";
        int back=0;
        
        while(index>=0)
        {
            string temp="";
            while(index>=0 && path[index]!='/')
            {
                temp+=path[index];
                index--;
            }
            
            index--;
            
            if(temp=="" || temp==".")
                continue;
            
            if(temp=="..")
                back++;
            else if(back>0)
            {
                back--;
            }
            else{
                ans+=temp;
                ans+="/";
            }
                
            
        }
        reverse(ans.begin(),ans.end());
        if(ans=="")
            return "/";
        return ans;
        
    }
};


-------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <sstream>
#include <stack>
#include <string>
using namespace std;

class Solution {
public:
    string simplifyPath(string path) {
        string token = "";
        
        // Create a stringstream to tokenize the input path
        stringstream ss(path);
        stack<string> st;
        
        // Tokenize the path based on '/'
        while (getline(ss, token, '/')) {
            // Skip empty tokens and current directory references
            if (token == "" || token == ".") continue;
            
            // Handle parent directory references
            if (token != "..") {
                st.push(token); // Push valid directories onto the stack
            } else if (!st.empty()) {
                st.pop(); // Pop the top directory to move up one level
            }
        }
        
        string result = "";
        
        // Construct the result path from the stack
        while (!st.empty()) {
            result = "/" + st.top() + result;
            st.pop();
        }
        
        // Handle the case of an empty result
        if (result.length() == 0) {
            result = "/";
        }
        
        return result;
    }
};

int main() {
    Solution solution;
    string input = "/a/./b/../../c/";
    string simplified = solution.simplifyPath(input);
    
    cout << "Original Path: " << input << endl;
    cout << "Simplified Path: " << simplified << endl;
    
    return 0;
}


