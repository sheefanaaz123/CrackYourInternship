#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    string minWindow(string s, string t) {
        int n = s.size();
        int m = t.size();

        if(m>n) return "";

        unordered_map<char,int>mp;

        for(auto i: t){
            mp[i]++;
        }

        int requiredCount = m;

        int left=0, right=0, start_i;
        int minSize=INT_MAX;

        while(right<n){
            char ch = s[right];
            if(mp[ch]>0){
                requiredCount--;
            }
            mp[ch]--;

            while(requiredCount == 0){
               int currentSize = right-left+1;
               if(currentSize<minSize){
                   start_i = left;
                   minSize = currentSize;
               }
               mp[s[left]]++;
               if(mp[s[left]]>0){
                   requiredCount++;
               }

               left++;
            }

            right++;
        }

        return minSize == INT_MAX? "":s.substr(start_i,minSize);

    }
};

int main() {
    Solution solution;
    std::string s = "ADOBECODEBANC";
    std::string t = "ABC";
    
    std::string result = solution.minWindow(s, t);
    
    std::cout << "Minimum window substring: " << result << std::endl;

    return 0;
}
