#include <iostream>
#include <vector>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
  bool isSymmetric(TreeNode* root) {
    return root == NULL || check(root->left, root->right);
  }

private:
  bool check(TreeNode* left, TreeNode* right) {
    if (left == NULL || right == NULL) {
      return left == right;
    }

    if (left->val != right->val) {
      return false;
    }

    return check(left->left, right->right) && check(left->right, right->left);
  }
};

int main() {
  // Create a test case.
  TreeNode* root = new TreeNode(1);
  root->left = new TreeNode(2);
  root->right = new TreeNode(2);
  root->left->left = new TreeNode(3);
  root->right->right = new TreeNode(3);

  // Check if the tree is symmetric.
  Solution solution;
  bool isSymmetric = solution.isSymmetric(root);

  // Print the result to the console.
  cout << "Is the tree symmetric? " << isSymmetric << endl;

  return 0;
}
