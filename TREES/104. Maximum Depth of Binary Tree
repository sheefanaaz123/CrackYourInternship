#include <iostream>
#include <vector>
#include<algorithm>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
  int maxDepth(TreeNode* root) {
    if (root == nullptr){
      return 0;
    }
    return max(maxDepth(root->right),maxDepth(root->left))+1;
  }
};

int main() {
  // Create a binary tree.
  TreeNode* root = new TreeNode(1);
  root->left = new TreeNode(2);
  root->right = new TreeNode(3);
  root->left->left = new TreeNode(4);
  root->left->left->left = new TreeNode(6);
  root->left->right = new TreeNode(5);

  // Calculate the maximum depth of the tree.
  Solution solution;
  int maxDepth = solution.maxDepth(root);

  // Print the maximum depth.
  std::cout << "The maximum depth of the tree is: " << maxDepth << std::endl;

  return 0;
}
