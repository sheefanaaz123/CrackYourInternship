#include <iostream>

// Define the TreeNode structure
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root==NULL){
            return false;
        }
        if(root->left==NULL && root->right==NULL){
            return (targetSum==root->val);
        }

        bool ans = false;

        if(root->left){
            ans = hasPathSum(root->left, targetSum-root->val);
        }
        if(root->right){
            ans = ans || hasPathSum(root->right, targetSum-root->val);
        }

        return ans;
    }
};

int main() {
    // Create a sample binary tree
    TreeNode* root = new TreeNode(5);
    root->left = new TreeNode(4);
    root->right = new TreeNode(8);
    root->left->left = new TreeNode(11);
    root->left->left->left = new TreeNode(7);
    root->left->left->right = new TreeNode(2);
    root->right->left = new TreeNode(13);
    root->right->right = new TreeNode(4);
    root->right->right->right = new TreeNode(1);

    Solution solution;

    // Test cases
    int targetSum1 = 22;
    int targetSum2 = 23;

    bool hasPath1 = solution.hasPathSum(root, targetSum1);
    bool hasPath2 = solution.hasPathSum(root, targetSum2);

    std::cout << "Does the tree have a path with a sum of " << targetSum1 << "? " << (hasPath1 ? "Yes" : "No") << std::endl;
    std::cout << "Does the tree have a path with a sum of " << targetSum2 << "? " << (hasPath2 ? "Yes" : "No") << std::endl;


    return 0;
}
