#include <bits/stdc++.h>
using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int findMaxPathSum(TreeNode *root, int &maxi) {
        if (root == nullptr)
            return 0;

        // Recursive calls to calculate maximum path sums for left and right subtrees
        int leftMaxPath = std::max(0, findMaxPathSum(root->left, maxi));
        int rightMaxPath = std::max(0, findMaxPathSum(root->right, maxi));

        // Calculate local maximum path sum ending at the current node
        int val = root->val;
        maxi = std::max(maxi, (leftMaxPath + rightMaxPath) + val);

        // Return local maximum path sum ending at the current node
        return std::max(leftMaxPath, rightMaxPath) + val;
    }

    int maxPathSum(TreeNode *root) {
        int maxi = INT_MIN;
        findMaxPathSum(root, maxi);
        return maxi;
    }
};


int main() {
    // Create a sample binary tree
    TreeNode *root = new TreeNode(10);
    root->left = new TreeNode(2);
    root->right = new TreeNode(10);
    root->left->left = new TreeNode(20);
    root->left->right = new TreeNode(1);
    root->right->right = new TreeNode(-25);
    root->right->right->left = new TreeNode(3);
    root->right->right->right = new TreeNode(4);

    // Instantiate the Solution class
    Solution solution;

    // Call the maxPathSum function
    int maxPathSumValue = solution.maxPathSum(root);

    // Display the result
    std::cout << "Maximum Path Sum: " << maxPathSumValue << std::endl;

    return 0;
}
