#include <bits/stdc++.h>
using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};


//Approach - 1 (DFS)
class Solution {
public:
    //modifed pre order traversal
    void preOrder(TreeNode* root, int level, vector<int>& result) {
        if(!root)
            return;
        
        if(result.size() < level)
            result.push_back(root->val);
        
        preOrder(root->right, level+1, result);
        preOrder(root->left, level+1, result);
    }
    vector<int> rightSideView(TreeNode* root) {
        if(!root)
            return {};
        
        vector<int> result;
        
        preOrder(root, 1, result);
        
        return result;
    }
};


//Approach-2 (Level Order Traversal)
// class Solution {
// public:
//     vector<int> rightSideView(TreeNode* root){
//         if(!root)
//             return {};
        
//         queue<TreeNode*> que;
//         vector<int> result;
        
//         que.push(root);
        
//         while(!que.empty()) {
//             int n = que.size();
//             TreeNode* rightNode = NULL;
//             while(n--) {
//                 rightNode = que.front();
//                 que.pop();
                
//                 if(rightNode->left)
//                     que.push(rightNode->left);
//                 if(rightNode->right)
//                     que.push(rightNode->right);
//             }
//             result.push_back(rightNode->val);
//         }
//         return result;
//     }
// };

int main() {
    // Example usage

    // Create a binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(4);

    // Create an instance of the Solution class
    Solution solution;

    // Test Approach 1 (DFS)
    vector<int> resultDFS = solution.rightSideView(root);

    // Print the result for Approach 1
    cout << "Right Side View (DFS): ";
    for (int val : resultDFS) {
        cout << val << " ";
    }
    cout << endl;

    // Test Approach 2 (Level Order Traversal)
    // Uncomment the following lines if you want to test the Level Order Traversal approach
    /*
    vector<int> resultLevelOrder = solution.rightSideView(root);

    // Print the result for Approach 2
    cout << "Right Side View (Level Order Traversal): ";
    for (int val : resultLevelOrder) {
        cout << val << " ";
    }
    cout << endl;
    */

    // Clean up allocated memory
    delete root->right->right;
    delete root->right;
    delete root->left->right;
    delete root->left;
    delete root;

    return 0;
}
