#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
private:
    int count = 0;
    int result = 0;

public:
    int kthSmallest(TreeNode *root, int k) {
        traverse(root, k);
        return result;
    }

private:
    void traverse(TreeNode *node, int k) {
        if (node == nullptr) {
            return;
        }
        traverse(node->left, k);
        count++;
        if (count == k) {
            result = node->val;
            return;
        }
        traverse(node->right, k);
    }
};

// Driver code
int main() {
    // Create a sample binary search tree
    TreeNode *root = new TreeNode(3);
    root->left = new TreeNode(1);
    root->right = new TreeNode(4);
    root->left->right = new TreeNode(2);

    // Instantiate the Solution class
    Solution solution;

    // Specify the value of k
    int k = 3;

    // Call the kthSmallest function
    int kthSmallestValue = solution.kthSmallest(root, k);

    // Display the result
    std::cout << "The " << k << "th smallest element is: " << kthSmallestValue << std::endl;

    return 0;
}
