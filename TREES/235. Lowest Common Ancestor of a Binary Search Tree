#include <iostream>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL || root==p || root==q){
            return root;
        }

        TreeNode *left = lowestCommonAncestor(root->left,p, q);
        TreeNode *right = lowestCommonAncestor(root->right,p, q);

        if(left==NULL){
            return right;
        } else if(right==NULL){
            return left;
        } else {
            return root;
        }
    }
};

int main() {
    // Create a sample binary tree
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(5);
    root->right = new TreeNode(1);
    root->left->left = new TreeNode(6);
    root->left->right = new TreeNode(2);
    root->right->left = new TreeNode(0);
    root->right->right = new TreeNode(8);
    root->left->right->left = new TreeNode(7);
    root->left->right->right = new TreeNode(4);

    Solution solution;

    // Test cases
    TreeNode* p = root->left;
    TreeNode* q = root->right;
    TreeNode* ancestor = solution.lowestCommonAncestor(root, p, q);
    std::cout << "Lowest Common Ancestor of " << p->val << " and " << q->val << " is: " << ancestor->val << std::endl;


    return 0;
}
