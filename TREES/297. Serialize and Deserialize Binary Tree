#include <bits/stdc++.h>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Codec {
public:
    string serialize(TreeNode* root) {
        if (!root) return "";
        
        string s = "";
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            TreeNode* curNode = q.front();
            q.pop();
            
            if (curNode == NULL) {
                s.append("#,");
            } else {
                s.append(to_string(curNode->val) + ',');
                q.push(curNode->left);
                q.push(curNode->right);
            }
        }
        return s;
    }

    TreeNode* deserialize(string data) {
        if (data.size() == 0) return NULL; 
        
        stringstream s(data);
        string str; 
        getline(s, str, ',');
        TreeNode *root = new TreeNode(stoi(str));
        queue<TreeNode*> q; 
        q.push(root); 
        
        while (!q.empty()) {
            TreeNode *node = q.front(); 
            q.pop(); 
            
            getline(s, str, ',');
            if (str == "#") {
                node->left = NULL; 
            } else {
                TreeNode* leftNode = new TreeNode(stoi(str)); 
                node->left = leftNode; 
                q.push(leftNode); 
            }
            
            getline(s, str, ',');
            if (str == "#") {
                node->right = NULL; 
            } else {
                TreeNode* rightNode = new TreeNode(stoi(str)); 
                node->right = rightNode;
                q.push(rightNode); 
            }
        }
        return root; 
    }
};

// Driver's code for testing
int main() {
    // Create a sample binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    // Instantiate the Codec
    Codec ser, deser;

    // Serialize the binary tree
    string serializedData = ser.serialize(root);
    cout << "Serialized tree: " << serializedData << endl;

    // Deserialize the binary tree
    TreeNode* reconstructedTree = deser.deserialize(serializedData);

    // Clean up memory (free the allocated nodes)
    delete root->left->left;
    delete root->left->right;
    delete root->left;
    delete root->right;
    delete root;

    return 0;
}
