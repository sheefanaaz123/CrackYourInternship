#include <iostream>

// Define the TreeNode structure
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(root1==NULL){
            return  root2;
        }
        if(root2==NULL){
            return  root1;
        }

        root1->val = root1->val + root2->val;

        root1->left = mergeTrees(root1->left,root2->left);
        root1->right = mergeTrees(root1->right,root2->right);

        return root1;
    }
};

void printInorder(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    printInorder(root->left);
    std::cout << root->val << " ";
    printInorder(root->right);
}

int main() {
    // Create the first binary tree
    TreeNode* root1 = new TreeNode(1);
    root1->left = new TreeNode(3);
    root1->right = new TreeNode(2);
    root1->left->left = new TreeNode(5);

    // Create the second binary tree
    TreeNode* root2 = new TreeNode(2);
    root2->left = new TreeNode(1);
    root2->right = new TreeNode(3);
    root2->left->right = new TreeNode(4);
    root2->right->right = new TreeNode(7);

    // Merge the two trees
    Solution solution;
    TreeNode* mergedRoot = solution.mergeTrees(root1, root2);

    // Print the merged tree to verify the result
    std::cout << "Merged Tree (Inorder Traversal): ";
    printInorder(mergedRoot);
    std::cout << std::endl;


    return 0;
}
