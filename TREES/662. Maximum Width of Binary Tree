#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int widthOfBinaryTree(TreeNode *root) {
        if (!root)
            return 0;
        int ans = 0;
        queue<pair<TreeNode *, int>> q;
        q.push({root, 0});
        while (!q.empty()) {
            int size = q.size();
            int curMin = q.front().second;
            long long leftMost, rightMost;
            for (int i = 0; i < size; i++) {
                long long cur_id = static_cast<long long>(q.front().second) - curMin;
                TreeNode *temp = q.front().first;
                q.pop();
                if (i == 0)
                    leftMost = cur_id;
                if (i == size - 1)
                    rightMost = cur_id;
                if (temp->left)
                    q.push({temp->left, static_cast<int>(cur_id * 2 + 1)});
                if (temp->right)
                    q.push({temp->right, static_cast<int>(cur_id * 2 + 2)});
            }
            ans = max(ans, static_cast<int>(rightMost - leftMost + 1));
        }
        return ans;
    }
};

// Driver code
int main() {
    // Create a sample binary tree
    TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(3);
    root->right = new TreeNode(2);
    root->left->left = new TreeNode(5);
    root->left->right = new TreeNode(3);
    root->right->right = new TreeNode(9);

    // Instantiate the Solution class
    Solution solution;

    // Call the widthOfBinaryTree function
    int maxWidth = solution.widthOfBinaryTree(root);

    // Display the result
    cout << "Maximum Width of Binary Tree: " << maxWidth << endl;

    return 0;
}
