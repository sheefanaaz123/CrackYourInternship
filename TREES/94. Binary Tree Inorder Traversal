ITERATIVE

#include <bits/stdc++.h>
using namespace std;

// Define the TreeNode structure.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
   vector<int> inorderTraversal(TreeNode* root) {
        vector<int> nodes;
        stack<TreeNode*> todo;
        while (root || !todo.empty()) {
           while (root) {
               todo.push(root);
               root = root -> left;
		   }
        root = todo.top();
        todo.pop();
        nodes.push_back(root -> val);
        root = root -> right;
     }
  return nodes;
  }
};

int main() {
  // Create a binary tree.
  TreeNode* root = new TreeNode(1);
  root->left = new TreeNode(2);
  root->right = new TreeNode(3);

  // Perform an in-order traversal of the binary tree.
  Solution solution;
  vector<int> nodes = solution.inorderTraversal(root);

  // Print the contents of the vector to the console.
  for (int i = 0; i < nodes.size(); i++) {
    cout << nodes[i] << " ";
  }

  cout << endl;

  return 0;
}


------------------------------------------------------------------------------------------------------------------------------
RECURSIVE

#include <bits/stdc++.h>
using namespace std;

// Define the TreeNode structure.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        inorder(root, ans);
        return ans;
    }
private:
    void inorder(TreeNode* root, vector<int>& ans) {
        if (root==NULL) {
            return;
        }
        inorder(root -> left, ans);
        ans.push_back(root -> val);
        inorder(root -> right, ans);
    }
};

int main() {
  // Create a binary tree.
  TreeNode* root = new TreeNode(1);
  root->left = new TreeNode(2);
  root->right = new TreeNode(3);

  // Perform an in-order traversal of the binary tree.
  Solution solution;
  vector<int> nodes = solution.inorderTraversal(root);

  // Print the contents of the vector to the console.
  for (int i = 0; i < nodes.size(); i++) {
    cout << nodes[i] << " ";
  }

  cout << endl;

  return 0;
}


------------------------------------------------------------------------------------

