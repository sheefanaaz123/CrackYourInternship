#include <bits/stdc++.h>
using namespace std;

/**
 * Definition for a binary tree node.
 */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:

    map<pair<int, int>, vector<TreeNode*>> mp;

    std::vector<TreeNode*> solve(int start, int end) {
        if (start > end) {
            return {nullptr};
        }

        if (start == end) {
            TreeNode* root = new TreeNode(start);
            return {root};
        }

        if (mp.find({start, end}) != mp.end())
            return mp[{start, end}];

        std::vector<TreeNode*> result;
        for (int i = start; i <= end; i++) {
            std::vector<TreeNode*> leftList = solve(start, i - 1);
            std::vector<TreeNode*> rightList = solve(i + 1, end);

            for (TreeNode* leftRoot : leftList) {
                for (TreeNode* rightRoot : rightList) {
                    TreeNode* root = new TreeNode(i);
                    root->left = leftRoot;
                    root->right = rightRoot;
                    result.push_back(root);
                }
            }
        }

        return mp[{start, end}] = result;
    }

    std::vector<TreeNode*> generateTrees(int n) {
        return solve(1, n);
    }
};

// Function to delete a binary tree and free the memory
void deleteTree(TreeNode* root) {
    if (root) {
        deleteTree(root->left);
        deleteTree(root->right);
        delete root;
    }
}

// Function to print the inorder traversal of a binary tree
void inorderTraversal(TreeNode* root) {
    if (root) {
        inorderTraversal(root->left);
        std::cout << root->val << " ";
        inorderTraversal(root->right);
    }
}

int main() {
    Solution solution;

    // Generate unique BSTs for n = 3
    int n = 3;
    std::vector<TreeNode*> result = solution.generateTrees(n);

    // Print the inorder traversal of each BST
    for (TreeNode* root : result) {
        inorderTraversal(root);
        std::cout << std::endl;

        // Delete the tree to avoid memory leaks
        deleteTree(root);
    }

    return 0;
}
