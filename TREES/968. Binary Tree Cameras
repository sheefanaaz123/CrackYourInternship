#include <bits/stdc++.h>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int minCameraCover(TreeNode* root) {
        camera = 0;
        return postorder(root) == PLEASE_COVER ? ++camera : camera;
    }

private:
    int COVERED = 0, PLEASE_COVER = 1, HAS_CAMERA = 2;
    int camera;

    int postorder(TreeNode* root) {
        if (root == nullptr)
            return COVERED;

        int left = postorder(root->left);
        int right = postorder(root->right);

        if (left == PLEASE_COVER || right == PLEASE_COVER) {
            camera++;
            return HAS_CAMERA;
        } else if (left == HAS_CAMERA || right == HAS_CAMERA) {
            return COVERED;
        } else {
            return PLEASE_COVER;
        }
    }
};

// Driver code
int main() {
    // Create a sample binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->left->left = new TreeNode(3);
    root->left->left->left = new TreeNode(4);
    root->left->left->left->left = new TreeNode(5);

    
    Solution solution;

    // Get the minimum number of cameras required
    int result = solution.minCameraCover(root);

    // Print the result
    cout << "Minimum number of cameras required: " << result << endl;

    // Clean up memory (optional)
    // Add deletion logic for the binary tree

    return 0;
}
