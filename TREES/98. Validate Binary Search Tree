#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return help(root, LONG_MIN, LONG_MAX);
    }

    bool help(TreeNode* root, long min, long max) {
        if (!root) return true;
        if (root->val <= min || root->val >= max) return false;
        return help(root->left, min, root->val) && help(root->right, root->val, max);
    }
};

// Function to delete a binary tree and free the memory
void deleteTree(TreeNode* root) {
    if (root) {
        deleteTree(root->left);
        deleteTree(root->right);
        delete root;
    }
}

int main() {
    Solution solution;

    // Create a sample binary tree
    TreeNode* root = new TreeNode(2);
    root->left = new TreeNode(1);
    root->right = new TreeNode(3);

    // Test the isValidBST function
    bool isBST = solution.isValidBST(root);

    // Print the result
    if (isBST) {
        cout << "The given binary tree is a valid BST." << endl;
    } else {
        cout << "The given binary tree is not a valid BST." << endl;
    }

    // Delete the tree to avoid memory leaks
    deleteTree(root);

    return 0;
}
