#include <bits/stdc++.h>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
private:
    TreeNode* first;
    TreeNode* prev;
    TreeNode* middle;
    TreeNode* last;

    void inorder(TreeNode* root) {
        if (root == NULL) {
            return;
        }
        inorder(root->left);

        if (prev != NULL && root->val < prev->val) {
            if (first == NULL) {
                // first violation
                first = prev;
                middle = root;
            } else {
                // violation
                last = root;
            }
        }

        prev = root;
        inorder(root->right);
    }

public:
    void recoverTree(TreeNode* root) {
        first = middle = last = NULL; // Initialize all three pointers to NULL
        prev = new TreeNode(INT_MIN);

        inorder(root);

        if (first && last) {
            swap(first->val, last->val);
        } else if (first && middle) {
            swap(first->val, middle->val);
        }
    }
};

// Inorder traversal function
void inorderTraversal(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    inorderTraversal(root->left);
    cout << root->val << " ";
    inorderTraversal(root->right);
}

// Driver code
int main() {
    // Sample tree
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(1);
    root->right = new TreeNode(4);
    root->right->left = new TreeNode(2);

    // Display the original tree
    cout << "Original Tree: ";
    inorderTraversal(root);

    // Instantiate the Solution class
    Solution solution;

    solution.recoverTree(root);

    // Display the recovered tree
    cout << "\nRecovered Tree: ";
    inorderTraversal(root);

    return 0;
}
