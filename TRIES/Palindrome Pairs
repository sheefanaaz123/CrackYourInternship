class Solution {
public:

    // Function to check if a string is a palindrome
    bool isPalindrome(string& s) {   
        int l = 0, r = s.size() - 1;
        while (l < r) {
            if (s[l++] != s[r--]) return false;
        }
        return true; 
    }

    // Main function to find palindrome pairs
    vector<vector<int>> palindromePairs(vector<string>& words) {
        vector<vector<int>> ans; // Vector to store palindrome pair indices
        int n = words.size();
        if (n < 2) return ans; // If there are less than two words, return empty result

        unordered_map<string, int> m; // Map to store reversed words and their indices

        // Reverse each word and store it in the map
        for (int i = 0; i < n; ++i) {
            auto s = words[i];
            reverse(s.begin(), s.end());
            m[s] = i;
        }

        // Iterate through each word and each possible split position
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j <= words[i].size(); ++j) {
                string st1 = words[i].substr(0, j); // Prefix
                string st2 = words[i].substr(j);    // Suffix

                // Check for palindrome pair with reversed prefix and valid suffix
                if (m.count(st1) && isPalindrome(st2) && m[st1] != i) {
                    ans.push_back({i, m[st1]});
                }

                // Check for palindrome pair with reversed suffix and valid prefix
                if (!st1.empty() && m.count(st2) && isPalindrome(st1) && m[st2] != i) {
                    ans.push_back({m[st2], i});
                }
            }            
        }
        return ans;
    }
};
